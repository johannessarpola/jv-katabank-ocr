/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fi.johannes.kata.ocr.core.data;

import fi.johannes.kata.ocr.cells.Cell;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Mockup POJO for the entries generated by OCR
 *
 * @author Johannes Sarpola <johannes.sarpola at gmail.com>
 * @date Jun 25, 2016
 */
public class Lexicons {

    private static class TetrisBlocks {

        private static final String empty = "   ";
        private static final String L = "|_ ";
        private static final String reverseL = " _|";
        private static final String ramp = "|_|";
        private static final String lineInMid = " | ";
        private static final String lineOnRight = "  |";
        private static final String lineOnLeft = "|  ";
        private static final String underscoreOnLeft = "_  ";
        private static final String underscoreInMid = " _ ";
        private static final String underscoreOnRight = "  _";
        private static final String lineOnLeftAndRight = "| |";
    }

    public static class DigitResolver {

        /**
         * Decision tree to figure out the digit value from input.
         *
         * @param cell Digit cell
         * @return Integer what's represented in the Cell, or -1 if it couldn't
         * be resolved
         */
        public static Integer resolve(Cell cell) {
            String cStr = cell.toString();
            if (cStr.equals(Digits.ONE)) {
                return 1;
            }
            if (cStr.equals(Digits.TWO)) {
                return 2;
            }
            if (cStr.equals(Digits.THREE)) {
                return 3;
            }
            if (cStr.equals(Digits.FOUR)) {
                return 4;
            }
            if (cStr.equals(Digits.FIVE)) {
                return 5;
            }
            if (cStr.equals(Digits.SIX)) {
                return 6;
            }
            if (cStr.equals(Digits.SEVEN)) {
                return 7;
            }
            if (cStr.equals(Digits.EIGHT)) {
                return 8;
            }
            if (cStr.equals(Digits.NINE)) {
                return 9;
            }
            if (cStr.equals(Digits.ZERO)) {
                return 0;
            } else {
                return -1;
            }

        }

    }

    public static class Digits {

        private static final String ZERO = TetrisBlocks.underscoreInMid + TetrisBlocks.lineOnLeftAndRight + TetrisBlocks.ramp;
        private static final String ONE = TetrisBlocks.empty + TetrisBlocks.lineOnRight + TetrisBlocks.lineOnRight;
        private static final String TWO = TetrisBlocks.underscoreInMid + TetrisBlocks.reverseL + TetrisBlocks.L;
        private static final String THREE = TetrisBlocks.underscoreInMid + TetrisBlocks.reverseL + TetrisBlocks.reverseL;
        private static final String FOUR = TetrisBlocks.empty + TetrisBlocks.ramp + TetrisBlocks.lineOnRight;
        private static final String FIVE = TetrisBlocks.underscoreInMid + TetrisBlocks.L + TetrisBlocks.reverseL;
        private static final String SIX = TetrisBlocks.underscoreInMid + TetrisBlocks.L + TetrisBlocks.ramp;
        private static final String SEVEN = TetrisBlocks.underscoreInMid + TetrisBlocks.lineOnRight + TetrisBlocks.lineOnRight;
        private static final String EIGHT = TetrisBlocks.underscoreInMid + TetrisBlocks.ramp + TetrisBlocks.ramp;
        private static final String NINE = TetrisBlocks.underscoreInMid + TetrisBlocks.ramp + TetrisBlocks.reverseL;

        public static String Zero() {
            return ZERO;
        }

        public static String One() {
            return ONE;
        }

        public static String Two() {
            return TWO;
        }

        public static String Three() {
            return THREE;
        }

        public static String Four() {
            return FOUR;
        }

        public static String Five() {
            return FIVE;
        }

        public static String Six() {
            return SIX;
        }

        public static String Seven() {
            return SEVEN;
        }

        public static String Eight() {
            return EIGHT;
        }

        public static String Nine() {
            return NINE;
        }

        /**
         * Gets all digits in a list in order from 0 -> 9
         *
         * @return
         */
        public static List<String> getAsList() {
            List<String> list = new ArrayList<>();
            list.add(ZERO);
            list.add(ONE);
            list.add(TWO);
            list.add(THREE);
            list.add(FOUR);
            list.add(FIVE);
            list.add(SIX);
            list.add(SEVEN);
            list.add(EIGHT);
            list.add(NINE);
            return list;
        }

        /**
         * Gets digits as a Integer -> String map
         *
         * @return
         */
        public static Map<Integer, String> getAsMap() {
            List<String> list = getAsList();
            HashMap<Integer, String> map = new HashMap<>();
            Integer i = 0;
            for (String s : list) {
                map.put(i, s);
                i++;
            }
            return map;
        }
    }
    // Could add alphabet too

}
